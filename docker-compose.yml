# AI Callcenter Agent - Docker Compose
# Designer: Abdullah Alawiss

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_callcenter_db
    environment:
      POSTGRES_DB: callcenter_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ops/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: ai_callcenter_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_callcenter_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/callcenter_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      - ENVIRONMENT=docker
      - LOG_LEVEL=info
    ports:
      - "8000:8000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./data/sample_calls:/app/sample_calls
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_callcenter_celery
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password@postgres:5432/callcenter_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      - ENVIRONMENT=docker
      - LOG_LEVEL=info
    volumes:
      - ./backend/uploads:/app/uploads
      - ./data/sample_calls:/app/sample_calls
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_config worker --loglevel=info --concurrency=2
    restart: unless-stopped

  # Celery Flower (Optional - for monitoring)
  celery-flower:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_callcenter_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    command: celery -A app.core.celery_config flower --port=5555
    restart: unless-stopped

  # Frontend Dashboard
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_callcenter_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_NAME=AI Callcenter Agent
      - NEXT_PUBLIC_DESIGNER=Abdullah Alawiss
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai_callcenter_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: ai_callcenter_network
    driver: bridge
